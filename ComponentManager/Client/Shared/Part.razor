@using ComponentManager.Shared
<div class ="row">
    <div class="col">
        <strong>@Title</strong>
    </div> 
    <div class="col">
        
    </div> 
    <div class="col">
        <input class="form-control justify-content-end search" type="text"  placeholder="Search" aria-label="Search" aria-describedby="Search"  @oninput="OnSearchChanged"/>
    </div> 
</div>

<div class ="row">
    <div class="container">
        @if (ChildContent == null) 
        {
            <p><em>Loading...</em></p>
        }
        else
        {
            @ChildContent
        }
        </div>
</div>


<div class ="row">
    <div class="col">
        <button type="button" class="btn btn-light">Create</button>
    </div> 
    <div class="col">
        
    </div> 
    <div class="col">
        <Paging PagingInfo=Paging
                OnPageRequested=OnPageRequested
                OnPageSizeRequested=OnPageSizeRequested/>
    </div> 
</div>



@code {
    // Demonstrates how a parent component can supply parameters
    [Parameter]
    public string? Title { get; set; }

    [Parameter]
    public RenderFragment? ChildContent { get; set; }

    [Parameter]
    public PagingInfo? Paging { get; set; }

    [Parameter]
    public EventCallback<int> OnPageRequested { get; set; }

    [Parameter]
    public EventCallback<int> OnPageSizeRequested { get; set; }

    [Parameter]
    public string Search { get; set; } = "";

    [Parameter]  
    public EventCallback<string> SearchChanged { get; set; }  

    private Task OnSearchChanged(ChangeEventArgs e)  
    {  
        Search = e?.Value?.ToString() ?? "";  
        return SearchChanged.InvokeAsync(Search);  
    }
}


