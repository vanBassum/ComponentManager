@using ComponentManager.Shared
@using Microsoft.AspNetCore.WebUtilities
@using System.Diagnostics.CodeAnalysis
@typeparam TItem

<div class ="row">
    <div class="col">
        <input class="form-control justify-content-end search" type="text"  placeholder="Search" aria-label="Search" aria-describedby="Search"  @oninput="(a)=>Search(a.Value.ToString())"/>
    </div> 
    <div class="col">
        
    </div> 
    <div class="col">
        
    </div> 
</div>

<div class ="row">
    <div class="container">
        <table class="table table-striped" cellspacing="0" width="100%">
            <thead>
                <tr>@TableHeader(this)</tr>
            </thead>
            <tbody>
                @foreach (var item in Items)
                {
                    if (RowTemplate is not null)
                    {
                        <tr>@RowTemplate(item)</tr>
                    }
                }
            </tbody>
        </table>
    </div>
</div>


<div class ="row">
    <div class="col">
        <button type="button" class="btn btn-light">Create</button>
    </div> 
    <div class="col">
        
    </div> 
    <div class="col">
        <Paging PagingInfo=Paging
                OnPageRequested=RequestPage
                OnPageSizeRequested=RequestPageSize/>
    </div> 
</div>



@code {
    // Demonstrates how a parent component can supply parameters
    [Parameter]
    public string? Title { get; set; }

    [Parameter]
    public string? Uri { get; set; }

    [Parameter]
    public RenderFragment? ChildContent { get; set; }

    [Parameter]
    public PagingInfo? Paging { get; set; }

    [Parameter]
    public EventCallback<string> OnLoad { get; set; }

    [Parameter]
    public RenderFragment<Part<TItem>>? TableHeader { get; set; }

    [Parameter]
    public RenderFragment<TItem>? RowTemplate { get; set; }

    [Parameter, AllowNull]
    public IReadOnlyList<TItem> Items { get; set; }



    private string search   = "";
    private int page        = 0;
    private int size        = 10;
    private string sort     = "";
    private bool desc       = false;


    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    public async Task Sort(string value)  
    {
        if (sort == value)
            desc = !desc;
        sort = value;
        page = 0;
        await LoadData();
    }

    private async Task RequestPage(int page)
    {
        this.page = page;
        await LoadData();
    }

    private async Task Search(string value)  
    {
        search = value;
        page = 0;
        await LoadData();
    }

    private async Task RequestPageSize(int size)
    {
        this.size = size;
        await LoadData();
    }

    private async Task<string> GetUri()
    {
        var queryParams = new Dictionary<string, string>
        {
            ["page"] = page.ToString(),
            ["size"] = size.ToString(),
            ["sort"] = sort.ToString(),
            ["desc"] = desc.ToString(),
            ["filter"] = search
        };
        return QueryHelpers.AddQueryString(Uri, queryParams);
    }


    private async Task LoadData()
    {
        await OnLoad.InvokeAsync(await GetUri());
    }





}


