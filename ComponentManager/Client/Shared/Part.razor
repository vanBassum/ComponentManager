@using ComponentManager.Shared
@using Microsoft.AspNetCore.WebUtilities
@using System.Diagnostics.CodeAnalysis
@inject HttpClient Http

@typeparam TItem

<div class ="row">
    <div class="col">
        <input class="form-control justify-content-end search" type="text"  placeholder="Search" aria-label="Search" aria-describedby="Search"  @oninput="(a)=>Filter(a.Value.ToString())"/>
    </div> 
    <div class="col">
        
    </div> 
    <div class="col">
        
    </div> 
</div>

<div class ="row">
    <div class="container">
        <table class="table table-striped" cellspacing="0" width="100%">
            <thead>
                <tr>@TableHeader(this)</tr>
            </thead>
            <tbody>
                @if(Items == null)
                {
                    <p><em>Loading...</em></p>
                }
                else
                {
                    @foreach (var item in Items)
                    {
                        if (RowTemplate is not null)
                        {
                            <tr>@RowTemplate(item)</tr>
                        }
                    }
                }
            </tbody>
        </table>
    </div>
</div>


<div class ="row">
    <div class="col">

        <Modal @ref="Modal">
            <div class="modal-header">
                @if(EditItem != null)
                {
                    @EditItem.ToString();
                }
            </div>
            <div class="modal-body">
                @if(EditTemplate != null && EditItem != null)
                {
                    @EditTemplate(EditItem);
                }
                
            </div>
            <div class="modal-footer">
                <p align="left"><button type="button" class="btn btn-danger" @onclick="() => EditModalDelete()">Delete</button></p>
                <button type="button" class="btn btn-secondary" @onclick="() => EditModalCancel()">Close</button>
                <button type="button" class="btn btn-primary" @onclick="() => EditModalSave()">Save changes</button>
            </div>
        </Modal>
        <button type="button" class="btn btn-light" @onclick="() => CreateComponent()">Create new</button>
    </div> 
    <div class="col">
        
    </div> 
    <div class="col">
        <Paging PagingInfo=PagingInfo
                OnPageRequested=RequestPage
                OnPageSizeRequested=RequestPageSize/>
    </div> 
</div>



@code {
    // Demonstrates how a parent component can supply parameters
    [Parameter]
    public string? Title { get; set; }

    [Parameter]
    public string? Uri { get; set; }

    [Parameter]
    public RenderFragment<Part<TItem>>? TableHeader { get; set; }

    [Parameter]
    public RenderFragment<TItem>? RowTemplate { get; set; }

    [Parameter]
    public RenderFragment<TItem>? EditTemplate { get; set; }

    [Parameter]
    public RenderFragment<Part<TItem>>? Filters { get; set; }

    private PagingInfo PagingInfo { get; set; }
    private TItem[] Items { get; set; }
    private TItem EditItem { get; set; } 
    private Modal Modal { get; set; }
    private string filter   = "";
    private int page        = 0;
    private int size        = 10;
    private string sort     = "";
    private bool desc       = false;







    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }


    public async Task Sort(string value)  
    {
        if (sort == value)
            desc = !desc;
        sort = value;
        page = 0;
        await LoadData();
    }

    private async Task RequestPage(int page)
    {
        this.page = page;
        await LoadData();
    }

    public async Task Filter(string value)  
    {
        filter = value;
        page = 0;
        await LoadData();
    }

    private async Task RequestPageSize(int size)
    {
        this.size = size;
        await LoadData();
    }

    private async Task<string> GetUri()
    {
        var queryParams = new Dictionary<string, string>
        {
            ["page"] = page.ToString(),
            ["size"] = size.ToString(),
            ["sort"] = sort.ToString(),
            ["desc"] = desc.ToString(),
            ["filter"] = filter
        };
        return QueryHelpers.AddQueryString(Uri, queryParams);
    }


    private async Task LoadData()
    {
        var uri = await GetUri();
        var response = await Http.GetFromJsonAsync<PagingInfo<TItem>>(uri);
        PagingInfo = response;
        Items = response.Data;
    }



    private async Task CreateComponent()
    {
        EditItem = Activator.CreateInstance<TItem>();
        Modal.Open();
    }

    public void EditComponent(TItem item)
    {
        EditItem = item;
        Modal.Open();
    }

    private async Task EditModalSave()
    {
        await SaveItem(EditItem);
        Modal.Close();
        await LoadData();
    }

    private void EditModalCancel()
    {
        Modal.Close();
    }

    private async Task EditModalDelete()
    {
        await DeleteItem(EditItem);
        Modal.Close();
        await LoadData();
    }

    private int GetKey(TItem item)
    {
        //@TODO: Optimize!!!
        var prop = item.GetType().GetProperties().Where(p => p.CustomAttributes.Any(a => a.AttributeType == typeof(System.ComponentModel.DataAnnotations.KeyAttribute))).FirstOrDefault();
        var val = prop?.GetValue(item);
        if (val is int res)
            return res;
        throw new Exception("Couldn't determine id");
    }

    private async Task SaveItem(TItem tor)
    {
        int id = GetKey(tor);
        if (id == 0)
            await Http.PostAsJsonAsync(Uri, tor);
        else
            await Http.PutAsJsonAsync(Uri, tor);            
    }

    private async Task DeleteItem(TItem tor)
    {
        int id = GetKey(tor);
        var queryParams = new Dictionary<string, string>
        {
            ["id"] = id.ToString()
        };
        var query = QueryHelpers.AddQueryString(Uri, queryParams);
        await Http.DeleteAsync(query);
    }
}


